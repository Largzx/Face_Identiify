# -*- coding: utf-8 -*-
import os

# Form implementation generated from reading ui file 'Face_Identiify.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import PyQt5
from PyQt5 import QtCore, QtGui, QtWidgets
import cv2 as cv
import numpy as np
import time
import json
from PIL import Image, ImageDraw, ImageFont


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1094, 731)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1091, 691))
        self.label.setAutoFillBackground(False)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("skin/BACKGRAND.jpg"))
        self.label.setScaledContents(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_Tip = QtWidgets.QLabel(self.centralwidget)
        self.label_Tip.setGeometry(QtCore.QRect(30, 30, 791, 51))
        font = QtGui.QFont()
        font.setFamily("三极泼墨体")
        font.setPointSize(21)
        font.setBold(True)
        font.setWeight(75)
        self.label_Tip.setFont(font)
        self.label_Tip.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Tip.setObjectName("label_Tip")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(880, 150, 151, 41))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_Display = QtWidgets.QLabel(self.centralwidget)
        self.label_Display.setGeometry(QtCore.QRect(30, 100, 791, 441))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label_Display.setFont(font)
        self.label_Display.setAutoFillBackground(False)
        self.label_Display.setAlignment(QtCore.Qt.AlignCenter)
        self.label_Display.setObjectName("label_Display")

        self.lineEdit_Name = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_Name.setFont(font)
        self.lineEdit_Name.setGeometry(QtCore.QRect(880, 201, 151, 51))
        self.lineEdit_Name.setObjectName("lineEdit_Name")
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.layoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget_2.setGeometry(QtCore.QRect(40, 580, 791, 52))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_LastPicture = QtWidgets.QPushButton(self.layoutWidget_2)
        self.pushButton_LastPicture.setMinimumSize(QtCore.QSize(174, 50))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_LastPicture.setFont(font)
        self.pushButton_LastPicture.setObjectName("pushButton_LastPicture")
        self.horizontalLayout.addWidget(self.pushButton_LastPicture)
        self.pushButton_FindALL = QtWidgets.QPushButton(self.layoutWidget_2)
        self.pushButton_FindALL.setMinimumSize(QtCore.QSize(174, 50))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_FindALL.setFont(font)
        self.pushButton_FindALL.setObjectName("pushButton_FindALL")
        self.horizontalLayout.addWidget(self.pushButton_FindALL)
        self.pushButton_NextPicture = QtWidgets.QPushButton(self.layoutWidget_2)
        self.pushButton_NextPicture.setMinimumSize(QtCore.QSize(175, 50))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_NextPicture.setFont(font)
        self.pushButton_NextPicture.setObjectName("pushButton_NextPicture")
        self.horizontalLayout.addWidget(self.pushButton_NextPicture)
        self.pushButton_Close = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Close.setGeometry(QtCore.QRect(880, 540, 151, 61))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Close.setFont(font)
        self.pushButton_Close.setObjectName("pushButton_Close")
        self.pushButton_Iden = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Iden.setGeometry(QtCore.QRect(880, 360, 151, 61))
        self.pushButton_Iden.setMaximumSize(QtCore.QSize(151, 61))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Iden.setFont(font)
        self.pushButton_Iden.setObjectName("pushButton_Iden")
        self.pushButton_Open = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Open.setGeometry(QtCore.QRect(880, 450, 151, 61))
        self.pushButton_Open.setMaximumSize(QtCore.QSize(199, 10000))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_Open.setFont(font)
        self.pushButton_Open.setObjectName("pushButton_Open")
        self.pushButton_InputFace = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_InputFace.setGeometry(QtCore.QRect(880, 273, 151, 61))
        self.pushButton_InputFace.setMinimumSize(QtCore.QSize(129, 50))
        font = QtGui.QFont()
        font.setFamily("华文新魏")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton_InputFace.setFont(font)
        self.pushButton_InputFace.setObjectName("pushButton_InputFace")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1094, 29))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        """ 设置按钮背景 """
        self.pushButton_Close.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_Open.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_Iden.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_InputFace.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_NextPicture.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_LastPicture.setStyleSheet("border-image:url(skin/p1.png)")
        self.pushButton_FindALL.setStyleSheet("border-image:url(skin/p1.png)")


        """ 设置按钮监听 """

        self.pushButton_Iden.clicked.connect(self.Identify_Face)
        self.pushButton_InputFace.clicked.connect(self.Input_Face)
        self.pushButton_Open.clicked.connect(self.Open_Cap)
        self.pushButton_Close.clicked.connect(self.Close_Cap)
        self.pushButton_FindALL.clicked.connect(self.FindALL)
        self.pushButton_LastPicture.clicked.connect(self.LastPicture)
        self.pushButton_NextPicture.clicked.connect(self.NEXTPicture)

        """ 设置变量 """
        self.CapState = '关闭中'
        self.face_detector = cv.CascadeClassifier("Haar\haarcascade_frontalface_default.xml")
        self.flag = 0
        self.face_dataface = "Facedata"

        """      照片录入变量 """
        self.time_save_Img = QtCore.QTimer()
        self.time_save_Img.timeout.connect(self.save_traindata)
        self.num_frame = 0
        self.id = 0
        self.id2 = 0
        self.state_Iden = "未识别"
        self.name_dict = {}
        self.key = ''

        """ 数据训练变量 """
        self.file_model = "trainer"
        self.result = 0
        self.score = 0
        # 绘制文字图片
        self.frame = 0

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_Tip.setText(_translate("MainWindow", "欢迎使用人脸检测系统\(@^0^@)/"))
        self.label_3.setText(_translate("MainWindow", "录入姓名："))
        self.label_Display.setText(_translate("MainWindow", "摄像头/数据显示区域"))
        self.pushButton_LastPicture.setText(_translate("MainWindow", "上一张"))
        self.pushButton_FindALL.setText(_translate("MainWindow", "查看训练数据"))
        self.pushButton_NextPicture.setText(_translate("MainWindow", "下一张"))
        self.pushButton_Close.setText(_translate("MainWindow", "关闭摄像头"))
        self.pushButton_Iden.setText(_translate("MainWindow", "识别人脸"))
        self.pushButton_Open.setText(_translate("MainWindow", "开启摄像头"))
        self.pushButton_InputFace.setText(_translate("MainWindow", "录入人脸"))

    # 开启摄像头
    def Open_Cap(self):
        # 判断摄像头开启状态
        self.label_Tip.setText("摄像头开启")
        if self.CapState == '开启中':
            return
        else:
            self.cap = cv.VideoCapture(0, cv.CAP_DSHOW)
            self.CapState = '开启中'
            faceModel = cv.face.LBPHFaceRecognizer_create()
            faceModel.read("trainer/my_faceModel.yml")
            while True:
                if self.CapState == '开启中':
                    flag, frame = self.cap.read()
                    self.frame = cv.flip(frame, 1)
                    """人脸检测器进行灰度转化"""
                    self.frame1 = cv.cvtColor(self.frame, cv.COLOR_BGR2GRAY)
                    """提取人脸区域"""
                    self.faces = self.face_detector.detectMultiScale(self.frame1)
                    "将图片转换为数字矩阵元素"
                    self.num_frame = np.array(self.frame1)

                    for x, y, w, h in self.faces:
                        cv.rectangle(self.frame, (x, y), (x + w, y + h), color=(0, 200, 0), thickness=2)
                        if self.state_Iden == '识别中':
                            self.result, self.score = faceModel.predict(np.array(self.frame1)[y:y + h, x:x + w])
                            for key, i in self.name_dict.items():
                                if self.score < 80:
                                    if (self.result <= i[1]) and (self.result >= i[0]):
                                        text = f"识别结果是：{key}"
                                        self.frame = self.img_chinese(self.frame, text, x, y+h+10)
                                        # self.frame = cv.putText(self.frame, f'{key}', (x+h, y + w), cv.FONT_HERSHEY_SIMPLEX, 2, (0, 255, 0), 2)
                                else:
                                    self.frame = self.img_chinese(self.frame, "查无此人", x, y+h+10)

                    # 将cv图片格式BGR转为RGB格式
                    frame2 = cv.cvtColor(self.frame, cv.COLOR_BGR2RGB)
                    frame2 = PyQt5.QtGui.QImage(frame2.data, frame2.shape[1], frame2.shape[0],
                                                PyQt5.QtGui.QImage.Format_RGB888)
                    self.pix = QtGui.QPixmap.fromImage(frame2)
                    self.label_Display.setPixmap(self.pix)

                    """进行剪切图片显示"""
                    cv.waitKey(1)
                else:
                    self.label_Display.clear()
                    self.label_Display.setText("摄像头区域")
                    break

    # 关闭摄像头
    def Close_Cap(self):
        if self.state_Iden == '识别中':
            # self.timer_get_face_score.stop()
            self.state_Iden = '未识别'
        if self.CapState == '关闭中':
            return
        self.CapState = '关闭中'
        self.cap.release()
        self.label_Tip.setText("摄像头已关闭")

    # 人脸录入
    def Input_Face(self):
        if not os.path.exists(self.face_dataface):
            os.makedirs(self.face_dataface)
        self.Open_Cap()
        if not self.lineEdit_Name.text():
            self.label_Tip.setText("请输入人名!")
        else:
            with open("record.json", "r", encoding='utf-8', errors="ignore") as f_name:
                self.name_dict = json.load(f_name)
                if self.name_dict.keys():
                    self.id = self.name_dict.get(list(self.name_dict.keys())[-1])[-1]
                    self.id2 = self.id
                self.name_dict[self.lineEdit_Name.text()] = []
            self.time_save_Img.start(200)

    def save_traindata(self):
        """ 获取文本框中的输入 """
        str1 = self.lineEdit_Name.text()
        """  将存储路径拼接完整 """
        """ 截取数字图像人脸特征区域 """
        for x, y, w, h in self.faces:
            self.id += 1
            face_dataface1 = self.face_dataface + f"/{self.id}.jpeg"
            self.num_frame = self.num_frame[y:y + h, x: x + w]
            """ 脸部特征区域保存 """
            cv.imwrite(face_dataface1, self.num_frame)
            self.label_Tip.setText(f"已录入{self.id - self.id2}张人脸")
            if self.id - self.id2 >= 10:
                self.label_Tip.setText(f"录入完毕，{self.id - self.id2}张")
                self.trainModel()
                self.time_save_Img.stop()
                self.name_dict[str1].append(self.id2 + 1)
                self.name_dict[str1].append(self.id)
                with open("record.json", 'w', encoding='utf-8', errors="ignore") as f_name:
                    json.dump(self.name_dict, f_name)
                self.id2 = self.id

    # 识别人脸
    def Identify_Face(self):
        self.Open_Cap()
        if self.state_Iden == '未识别':
            self.state_Iden = '识别中'
        elif self.state_Iden == '识别中':
            self.state_Iden = '未识别'
        f_file = open("record.json", 'r', encoding='utf-8', errors="ignore")
        self.name_dict = json.load(f_file)

    def trainModel(self):
        if not os.path.exists(self.file_model):
            os.makedirs(self.file_model)
        # 训练集数据
        x_Train, y_Train = self.creat_model()
        # 建立模型
        faceModel = cv.face.LBPHFaceRecognizer_create()
        # 训练模型
        faceModel.train(x_Train, np.array(y_Train))
        # 保存模型
        faceModel.write(f'{self.file_model}/my_faceModel.yml')

    def creat_model(self):
        # 定义两个容器，存放训练集数据和结果
        facesSamples = []
        ids = []
        # 再定义一个容器，存储人脸路径
        imagePaths = []
        # 遍历路径中所有文件，获得所有文件路径并存入路径容器
        for f in os.listdir(self.face_dataface):
            # 根据路径名称拼接成完整路径
            fPath = os.path.join(self.face_dataface, f)
            imagePaths.append(fPath)

        # 创建人脸检测器
        face_detector = cv.CascadeClassifier('Haar/haarcascade_frontalface_default.xml')
        # 遍历图片路径
        for imagePath in imagePaths:
            # 将图片读取到img中
            img = cv.imread(imagePath)
            # 将读取的图片转换为灰度图
            PIL_img = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
            # 把图片转换为像素点矩阵
            img_numpy = np.array(PIL_img)
            # 检测人脸，获得人脸信息
            faces = face_detector.detectMultiScale(img_numpy)
            # 获得当当前文件名称
            id = int(os.path.split(imagePath)[1].split('.')[0])
            # 截取图片中人脸区域的数字图像截图
            for x, y, w, h in faces:
                facesSamples.append(img_numpy[y:y + h, x:x + w])
                ids.append(id)
        return facesSamples, ids

    def img_chinese(self, img, text, position, position2, textcolor = (0, 0, 255), textSize = 20):
        if isinstance(img, np.ndarray):
            img = Image.fromarray(cv.cvtColor(img, cv.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(img)
        fontstyle = ImageFont.truetype("STSONG.TTF", textSize, encoding="utf-8")
        draw.text((position, position2), text, textcolor, font=fontstyle)
        return cv.cvtColor(np.asarray(img), cv.COLOR_RGB2BGR)

   #上一张图片
    def LastPicture(self):
        if self.curImgId > 0:
            self.curImgId = self.curImgId - 1
        else:
            self.curImgId = len(self.imageNameList)-1

        imgPath = os.path.join(self.imgFolder, self.imageNameList[self.curImgId])
        with open("record.json", 'r', encoding="utf-8", errors="ignore") as f:
            self.name_dict = json.load(f)
            for key, i in self.name_dict.items():
                if self.curImgId >= i[0] - 1 and self.curImgId <= i[1] - 1:
                    self.pix = QtGui.QPixmap(imgPath)
                    # self.label_Display.setScaledContents(True)
                    self.label_Display.setPixmap(self.pix)
                    self.label_Tip.setText(f"共有{len(self.imageNameList)}张照片, {key}：({self.curImgId % 10 +1}/10)")

    #下一张图片
    def NEXTPicture(self):
        imgCount = len(self.imageNameList)
        if self.curImgId < imgCount - 1:
            self.curImgId += 1
        else:
            self.curImgId = 0
        imgPath = os.path.join(self.imgFolder, self.imageNameList[self.curImgId])

        with open("record.json", 'r', encoding="utf-8", errors="ignore") as f:
            self.name_dict = json.load(f)
            for key, i in self.name_dict.items():
                if self.curImgId >= i[0]-1 and self.curImgId <= i[1]-1:
                    self.pix = QtGui.QPixmap(imgPath)
                    # self.label_Display.setScaledContents(True)
                    self.label_Display.setPixmap(self.pix)
                    self.label_Tip.setText(f"共有{len(self.imageNameList)}张照片, {key}：({self.curImgId % 10 +1}/10)")

    #查看所录入的人脸图片
    def FindALL(self):

        # 在资源管理器窗口中打开默认路径
        # selectimgFolder = QtWidgets.QFileDialog.getExistingDirectory(None, "select folder", "Facedata")
        selectimgFolder = "Facedata"

        # 如果有选中路径
        if selectimgFolder != '':
            self.imgFolder = selectimgFolder
            self.imageNameList = os.listdir(self.imgFolder)
            self.imageNameList = sorted(self.imageNameList, key=lambda x:int(x[:-5]))
            # 如果选中的是项目自带的图片文件夹，则会输出['风景1.jpg‘，’风景2.jpeg','风景3.jpeg','风景4.jpeg']
            # print(imageNameList)

            if len(self.imageNameList) > 0:
                # 获取第一张图片的路径
                imgPath = os.path.join(self.imgFolder, self.imageNameList[0])
                self.curImgId = 0

                with open("record.json", 'r', encoding="utf-8", errors="ignore") as f:
                    self.name_dict = json.load(f)
                    for key, i in self.name_dict.items():
                        if self.curImgId >= i[0] - 1 and self.curImgId <= i[1] - 1:
                            self.pix = QtGui.QPixmap(imgPath)
                            # self.label_Display.setScaledContents(True)
                            self.label_Display.setPixmap(self.pix)
                            self.label_Tip.setText(f"共有{len(self.imageNameList)}张照片, {key}：({self.curImgId % 10 +1}/10)")




if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
